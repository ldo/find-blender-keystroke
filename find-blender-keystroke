#!/bin/bash
#+
# This script performs various useful queries on Blender’s keymap
# definitions. It can find bindings for a specified keystroke, or
# for a specified operator, or it can dump out entire keymaps.
#
# Invocation details are documented in the find-blender-keystroke(1)
# man page, included with this script.
#
# Copyright 2017-2021 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY-SA <http://creativecommons.org/licenses/by-sa/4.0/>.
#-

blender=blender
list_function=
find_operator=
factory_settings=
for ((;;)); do
    if [ "${1:0:2}" != "--" ]; then
        break
    fi
    if [ "$1" == "--" ]; then
        shift
        break
    fi
    opt="${1:2:${#1}}"
    shift
    val="${opt#*=}"
    opt="${opt%%=*}"
    if [ "$opt" = "blender" ]; then
        blender="$val"
    elif [ "$opt" = "factory" ]; then
        factory_settings=1
    elif [ "$opt" = "find-operator" ]; then
        find_operator=1
    elif [ "$opt" = "list-keymods" ]; then
        list_function="keymods"
    elif [ "$opt" = "list-keymaps" ]; then
        list_function="keymaps"
    else
        echo "$0: bad option $opt" 1>&2
        exit 3
    fi
done
if [ \( -z "$list_function" -a $# != 1 \) -o \( -n "$list_function" -a \( $# != 0 \) \) ]; then
    echo $'Usage:\n\t'"$0" $'«keystroke»\nor\n\t'"$0"$' --find-operator «operator»\nor\n\t'"$0" $'--list-keymods\nor\n\t'"$0" $'--list-keymaps' 1>&2
    exit 3
fi
export PARM_list_function="$list_function"
if [ -z "$list_function" ]; then
    export PARM_keystroke="$1"
fi
export PARM_find_operator="$find_operator"
export PARM_factory_settings="$factory_settings"

exec "$blender" -noaudio 5>&1 1>/dev/null -b -P <(cat <<'EOD'
import sys
import os
import enum
import bpy

event_codes = frozenset(
  ( # event “type” codes (copied from source/blender/makesrna/intern/rna_wm.c):
    "NONE",
    "LEFTMOUSE",
    "MIDDLEMOUSE",
    "RIGHTMOUSE",
    "BUTTON4MOUSE",
    "BUTTON5MOUSE",
    "BUTTON6MOUSE",
    "BUTTON7MOUSE",

    "PEN",
    "ERASER",

    "MOUSEMOVE",
    "INBETWEEN_MOUSEMOVE",
    "TRACKPADPAN",
    "TRACKPADZOOM",
    "MOUSEROTATE",
    "MOUSESMARTZOOM",

    "WHEELUPMOUSE",
    "WHEELDOWNMOUSE",
    "WHEELINMOUSE",
    "WHEELOUTMOUSE",

    "EVT_TWEAK_L",
    "EVT_TWEAK_M",
    "EVT_TWEAK_R",

    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",

    "ZERO",
    "ONE",
    "TWO",
    "THREE",
    "FOUR",
    "FIVE",
    "SIX",
    "SEVEN",
    "EIGHT",
    "NINE",

    "LEFT_CTRL",
    "LEFT_ALT",
    "LEFT_SHIFT",
    "RIGHT_ALT",
    "RIGHT_CTRL",
    "RIGHT_SHIFT",

    "OSKEY",
    "APP",
    "GRLESS",
    "ESC",
    "TAB",
    "RET",
    "SPACE",
    "LINE_FEED",
    "BACK_SPACE",
    "DEL",
    "SEMI_COLON",
    "PERIOD",
    "COMMA",
    "QUOTE",
    "ACCENT_GRAVE",
    "MINUS",
    "PLUS",
    "SLASH",
    "BACK_SLASH",
    "EQUAL",
    "LEFT_BRACKET",
    "RIGHT_BRACKET",
    "LEFT_ARROW",
    "DOWN_ARROW",
    "RIGHT_ARROW",
    "UP_ARROW",
    "NUMPAD_2",
    "NUMPAD_4",
    "NUMPAD_6",
    "NUMPAD_8",
    "NUMPAD_1",
    "NUMPAD_3",
    "NUMPAD_5",
    "NUMPAD_7",
    "NUMPAD_9",
    "NUMPAD_PERIOD",
    "NUMPAD_SLASH",
    "NUMPAD_ASTERIX", # sic
    "NUMPAD_0",
    "NUMPAD_MINUS",
    "NUMPAD_ENTER",
    "NUMPAD_PLUS",
    "F1",
    "F2",
    "F3",
    "F4",
    "F5",
    "F6",
    "F7",
    "F8",
    "F9",
    "F10",
    "F11",
    "F12",
    "F13",
    "F14",
    "F15",
    "F16",
    "F17",
    "F18",
    "F19",
    "F20",
    "F21",
    "F22",
    "F23",
    "F24",
    "PAUSE",
    "INSERT",
    "HOME",
    "PAGE_UP",
    "PAGE_DOWN",
    "END",

    "MEDIA_PLAY",
    "MEDIA_STOP",
    "MEDIA_FIRST",
    "MEDIA_LAST",

    "TEXTINPUT",

    "WINDOW_DEACTIVATE",
    "TIMER",
    "TIMER0",
    "TIMER1",
    "TIMER2",
    "TIMER_JOBS",
    "TIMER_AUTOSAVE",
    "TIMER_REPORT",
    "TIMERREGION",

    "NDOF_MOTION",
    "NDOF_BUTTON_MENU",
    "NDOF_BUTTON_FIT",
    "NDOF_BUTTON_TOP",
    "NDOF_BUTTON_BOTTOM",
    "NDOF_BUTTON_LEFT",
    "NDOF_BUTTON_RIGHT",
    "NDOF_BUTTON_FRONT",
    "NDOF_BUTTON_BACK",
    "NDOF_BUTTON_ISO1",
    "NDOF_BUTTON_ISO2",
    "NDOF_BUTTON_ROLL_CW",
    "NDOF_BUTTON_ROLL_CCW",
    "NDOF_BUTTON_SPIN_CW",
    "NDOF_BUTTON_SPIN_CCW",
    "NDOF_BUTTON_TILT_CW",
    "NDOF_BUTTON_TILT_CCW",
    "NDOF_BUTTON_ROTATE",
    "NDOF_BUTTON_PANZOOM",
    "NDOF_BUTTON_DOMINANT",
    "NDOF_BUTTON_PLUS",
    "NDOF_BUTTON_MINUS",
    "NDOF_BUTTON_ESC",
    "NDOF_BUTTON_ALT",
    "NDOF_BUTTON_SHIFT",
    "NDOF_BUTTON_CTRL",
    "NDOF_BUTTON_1",
    "NDOF_BUTTON_2",
    "NDOF_BUTTON_3",
    "NDOF_BUTTON_4",
    "NDOF_BUTTON_5",
    "NDOF_BUTTON_6",
    "NDOF_BUTTON_7",
    "NDOF_BUTTON_8",
    "NDOF_BUTTON_9",
    "NDOF_BUTTON_10",
    "NDOF_BUTTON_A",
    "NDOF_BUTTON_B",
    "NDOF_BUTTON_C",

    "ACTIONZONE_AREA",
    "ACTIONZONE_REGION",
    "ACTIONZONE_FULLSCREEN",
  ))

@enum.unique
class MODIFIER(enum.Enum) :
    "the valid key/mousestroke modifiers."
    ANY = "any" # special case
    ALT = "alt"
    CTRL = "ctrl"
    SHIFT = "shift"
    OSKEY = "oskey"

    @property
    def attrname(self) :
        "the name of the KeyMapItem attribute corresponding to this enum value."
        return \
            self.value
    #end attrname

#end MODIFIER

class KeystrokeError(Exception) :

    def __init__(self, msg) :
        self.msg = msg
    #end __init__

#end KeystrokeError

class Keystroke :
    "represents a keystroke."

    def __init__(self, code, modifiers, keymod = None) :
        if code != None and code not in event_codes :
            raise KeystrokeError("invalid event code “%s”" % code)
        #end if
        invalid_modifiers = set(m for m in modifiers if not isinstance(m, MODIFIER))
        if len(invalid_modifiers) != 0 :
            raise KeystrokeError \
              (
                    "invalid %s “%s”"
                %
                    (
                        ("modifier", "modifiers")[len(invalid_modifiers) > 1],
                        ", ".join(sorted(invalid_modifiers)),
                    )
              )
        #end if
        if (MODIFIER.ANY in modifiers) > (len(modifiers) == 1) :
            raise KeystrokeError("modifier “any” cannot be mixed with other modifiers")
        #end if
        if keymod == "NONE" :
            keymod = None
        elif keymod != None and keymod not in event_codes :
            raise KeystrokeError("invalid keymod event code “%s”" % code)
        #end if
        self.code = code
        self.modifiers = frozenset(m for m in modifiers)
        self.keymod = keymod
    #end __init__

    def __hash__(self) :
        return \
            (
                hash(self.code)
            ^
                hash(self.modifiers)
            ^
                hash(self.keymod)
            )
    #end __hash__

    def __eq__(k1, k2) :
        return \
            (
                isinstance(k2, type(k1))
            and
                k1.code == k2.code
            and
                k1.modifiers == k2.modifiers
            and
                k1.keymod == k2.keymod
            )
    #end __eq__

    def __repr__(self) :
        return \
          (
            "-".join
              (
                tuple
                  (
                    m.value.upper()
                    for m in MODIFIER
                    if m in self.modifiers
                  )
                +
                    (
                        (),
                        (self.keymod,),
                    )[self.keymod != None]
                +
                    (self.code,)
              )
          )
    #end __repr__

#end Keystroke

def parse_keystroke(s) :
    pieces = s.split("-")
    code = pieces[-1].upper()
    if code == "ANY" :
        code = None
    #end if
    modifiers = set()
    keymod = None
    for k in pieces[:-1] :
        k = k.upper()
        if k in MODIFIER.__members__.keys() :
            modifiers.add(MODIFIER[k])
        elif k in event_codes :
            if keymod == None :
                keymod = k
            else :
                raise KeystrokeError("only one keymod allowed")
            #end if
        else :
            raise KeystrokeError("unrecognized modifier “%s”" % k)
        #end if
    #end for
    return \
        Keystroke \
          (
            code = code,
            modifiers = modifiers,
            keymod = keymod
          )
#end parse_keystroke

out = os.fdopen(5, "w", encoding = "utf-8")
  # use a different fd from stdout, only way it seems to avoid
  # output being polluted by Blender’s messages

list_function = os.getenv("PARM_list_function", "")
find_operator = os.getenv("PARM_find_operator", "") != ""
factory_settings = os.getenv("PARM_factory_settings", "") != ""
keystroke = None
operator_name = None
if list_function == "" :
    if find_operator :
        operator_name = os.getenv("PARM_keystroke")
    else :
        keystroke = parse_keystroke(os.getenv("PARM_keystroke"))
    #end if
#end if

if factory_settings :
    bpy.ops.wm.read_factory_userpref()
#end if
bpy.utils.keyconfig_init()
  # needed because otherwise keymap is not automatically loaded in background mode

exit_status = 0

wm = bpy.data.window_managers[0]
if list_function == "keymods" :
    keymods = set()
    for keyconf in wm.keyconfigs :
        for keymap in keyconf.keymaps :
            for item in keymap.keymap_items :
                if item.key_modifier != "NONE" :
                    keymods.add(item.key_modifier)
                #end if
            #end for
        #end for
    #end for
    if len(keymods) != 0 :
        out.write("Keymods: %s\n" % ", ".join(k for k in sorted(keymods)))
    else :
        out.write("No keymods found!?\n")
    #end if
elif list_function == "keymaps" :
    for keyconf in wm.keyconfigs :
        in_this_keyconf = False
        for keymap in keyconf.keymaps :
            if not in_this_keyconf :
                out.write("keymaps in keyconf “%s”[%d]:\n" % (keyconf.name, len(keyconf.keymaps)))
                in_this_keyconf = True
            #end if
            out.write("  “%s”[%d]\n" % (keymap.name, len(keymap.keymap_items)))
        #end for
    #end for
else :
    nr_found = 0
    for keyconf in wm.keyconfigs :
        in_this_keyconf = False
        for keymap in keyconf.keymaps :
            in_this_keymap = False
            for item in keymap.keymap_items :
                if (
                        (
                            operator_name == None
                        or
                            item.idname == operator_name
                        )
                    and
                        (
                            keystroke == None
                        or
                                (keystroke.code == None or item.type == keystroke.code)
                            and
                                (
                                    MODIFIER.ANY in keystroke.modifiers
                                or
                                    all
                                      (
                                        getattr(item, m.attrname) == (m in keystroke.modifiers)
                                        for m in MODIFIER
                                        if m != MODIFIER.ANY
                                      )
                                )
                            and
                                (keystroke.keymod == None or item.key_modifier == keystroke.keymod)
                        )
                ) :
                    if not in_this_keyconf :
                        out.write("* keyconf “%s”\n" % keyconf.name)
                        in_this_keyconf = True
                    #end if
                    if not in_this_keymap :
                        out.write(" * keymap “%s”\n" % keymap.name)
                        in_this_keymap = True
                    #end if
                    nr_found += 1
                    out.write \
                      (
                            "    %s => “%s”: %s %s %s %s%s%s\n"
                        %
                            (
                                repr
                                  (
                                    Keystroke
                                      (
                                        code = item.type,
                                        modifiers = set
                                          (
                                            m
                                            for m in MODIFIER
                                            if m != MODIFIER.ANY and getattr(item, m.attrname)
                                          ),
                                        keymod = item.key_modifier
                                      )
                                  ),
                                item.name,
                                item.idname,
                                (lambda : None, lambda : dict(item.properties))[item.properties != None](),
                                item.map_type,
                                item.value,
                                ("", " userdef")[item.is_user_defined],
                                ("", " usermod")[item.is_user_modified],
                                # could display more info
                            )
                      )
                #end if
            #end for
        #end for
    #end for
    out.write("Mappings found: %d\n" % nr_found)
#end if

out.flush()
sys.exit(exit_status)
EOD
)
